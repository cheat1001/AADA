//??TOWER OF HANOI??

#include<iostream>
using namespace std;

void Towerofhanoi(int n,char from_rod,char to_rod,char aux_rod){
    if(n==0){
        return;
    }
    Towerofhanoi(n-1,from_rod,aux_rod,to_rod);
    cout<<"Move rod "<<n<<" from "<<from_rod<<" to "<<to_rod<<endl;;
    Towerofhanoi(n-1,aux_rod,to_rod,from_rod);
}

int main(){
    int n;
    cout<<"Enter no.of beads:";
    cin>>n;
    Towerofhanoi(n,'A','C','B');
    return 0;
}

//================================================================== //

//??INSERTION SORT??

#include<iostream>
#include<cstdlib>
#include<time.h>
using namespace std;

void ins_sort(int a[],int n){
    int key;
    for(int i=1;i<n;i++){
        key=a[i];
        int j=i-1;
        while(a[j]>key && j>=0){
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=key;
    }
    for(int i=0;i<n;i++)
    cout<<a[i]<<" ";
}

int main(){
    int n;
    cout<<"Enter the no.of elements:";
    cin>>n;
    int a[n];
    srand(time(0));
    for(int i=0;i<n;i++){
        a[i]=rand()%100;
    }
    ins_sort(a,n);

    return 0;
}

//===================================================== //

//??MERGE SORT??

#include<iostream>
#include<time.h>
#include<cstdlib>
using namespace std;

void Merge(int a[],int l,int m,int h){
    int n1=m-l+1;
    int n2=h-m;
    int x[n1],y[n2];
    for(int i=0;i<n1;i++){
        x[i]=a[l+i];
    }
    for(int i=0;i<n2;i++){
        y[i]=a[m+1+i];
    }
    int i=0,j=0,k=l;
    while(i<n1 && j<n2){
        if(x[i]<y[j]){
            a[k]=x[i];
            k++;
            i++;
        }else{
            a[k]=y[j];
            j++;
            k++;
        }
    }

    while(i<n1){
        a[k]=x[i];
        i++;
        k++;
    } 
    while(j<n2){
        a[k]=y[j];
        j++;
        k++;
    }

}

void Merge_sort(int a[],int l,int h){
    if(l<h){
        int m=(l+h)/2;
        Merge_sort(a,l,m);
        Merge_sort(a,m+1,h);
        Merge(a,l,m,h);
    }
}

int main(){
    int n;
    cout<<"Enter the no.of elements:";
    cin>>n;
    int a[n];
    srand(time(0));
    for(int i=0;i<n;i++){
        a[i]=rand()%100;
    }
    int l=0;
    int h=n-1;
    Merge_sort(a,l,h);
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

//=================================================== //

//??BUBLE SORT??

#include<iostream>
#include<time.h>
#include<cstdlib>
using namespace std;

void Buble_sort(int a[],int n){
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(a[i]>a[j]){
                int k=a[i];
                a[i]=a[j];
                a[j]=k;
            }
        }
    }
}

int main(){
    int n;
    cout<<"Enter the no.of elements:";
    cin>>n;
    int a[n];
    srand(time(0));
    for(int i=0;i<n;i++){
        a[i]=rand()%100;
    }
    Buble_sort(a,n);
    for(int i=0;i<n;i++){
        cout<<a[i]<<"";
    }
    return 0;
}

//================================================== //

//??QUICK SORT??

#include<iostream>
#include<time.h>
#include<cstdlib>
using namespace std;

int Partation(int a[],int l,int h){
    int pv=a[h];
    int i=l;
    for(int j=l;j<h;j++){
        if(a[j]<pv){
            swap(a[j],a[i]);
            i++;
        }
    }
    swap(a[i],a[h]);
    return i;
}

void Quick_sort(int a[],int l,int h){
    if(l<h){
        int pi=Partation(a,l,h);
        Quick_sort(a,l,pi-1);
        Quick_sort(a,pi+1,h);
    }
}

int main(){
    int n;
    cout<<"Enter the no.of elements:";
    cin>>n;
    int a[n];
    srand(time(0));
    for(int i=0;i<n;i++){
        a[i]=rand()%100;
    }
    Quick_sort(a,0,n-1);
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

//==================================================== //

//??BINARY SEARCH??

#include<iostream>
using namespace std;

int Binary_search(int a[],int n,int l,int h){
    while(l<=h){
        int m=(h+l)/2;
        if(n==a[m]){
            return m;
        }
        if(n<a[m]){
            h=m-1;
        }else{
            l=m+1;
        }
    }
    return -1;
}

int main(){
    int a[]={1,2,3,4,5,6,7,8,9};
    int n;
    cout<<"Enter elements:";
    cin>>n;
    int x=Binary_search(a,n,0,sizeof(a)/sizeof(a[0])-1);
    if(x==-1){
        cout<<"Not Found";
    }else{
        cout<<"Index:"<<x;
    }
    return 0;
}

//=============================================== //

//??BUILD HEAP??

#include<iostream>
#include<time.h>
#include<cstdlib>
using namespace std;

void Heapify(int a[],int n,int i){
    int lar=i;
    int l=i*2;
    int r=i*2+1;
    if(l<n && a[l]>a[lar]){
        lar=l;
    }
    if(r<n && a[r]>a[lar]){
        lar=r;
    }
    if(lar != i){
        swap(a[lar],a[i]);
        Heapify(a,n,lar);
    }
}

void heapify(int a[],int n,int i){
    int low=i;
    int l=i*2;
    int r=i*2+1;
    if(l<n && a[l]<a[low]){
        low=l;
    }
    if(r<n && a[r]<a[low]){
        low=r;
    }
    if(low != i){
        swap(a[low],a[i]);
        heapify(a,n,low);
    }
}

void Build_heap(int a[],int n){
    for(int i=n/2;i>=0;i--){
        Heapify(a,n,i);
    }
}

void build_heap(int a[],int n){
    for(int i=n/2;i>=0;i--){
        heapify(a,n,i);
    }
}

int main(){
    int n;
    cout<<"Enter the no.of elements:";
    cin>>n;
    int a[n];
    srand(time(0));
    for(int i=0;i<n;i++){
        a[i]=rand()%100;
    }
    build_heap(a,n);
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

//============================================= //

//??KNAP SACK??

#include<iostream>
#include<cstdlib>
using namespace std;

void Knap_sack(float w[],float p[],int n,float m){
    float r[n];
    float profit=0;
    for(int i=0;i<n;i++){
        r[i]=p[i]/w[i];
    }
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(r[i]<r[j]){
                swap(r[j],r[i]);
                swap(p[j],p[i]);
                swap(w[i],w[j]);
            }
        }
    }
    int i=0;
    for(;i<n;i++){
        if(m>=w[i]){
            profit=profit+p[i];
            m=m-w[i];
        }else{
            break;
        }
    }
    if(m>0){
        profit=profit+p[i]*m/w[i];
    }
    cout<<"Profit:"<<profit;
}

int main(){
    int n;
    float m;
    cout<<"Enter the no.of objects:";
    cin>>n;
    cout<<"Enter the Weight:";
    cin>>m;
    float p[n],w[n];
    for(int i=0;i<n;i++){
        cout<<"Enter object "<<i+1<<" Weight:";
        cin>>w[i];
        cout<<"Enter object "<<i+1<<" Profit:";
        cin>>p[i];
    }
    Knap_sack(w,p,n,m);
    return 0;
}

//==================================================== //

//??JOB SEQUENCING??

#include<iostream>
#include<cstdlib>
using namespace std;

void Max_sort(int d[],int p[],int n){
    for(int i=1;i<n+1;i++){
        for(int j=i+1;j<n+1;j++){
            if(p[i]<p[j]){
                swap(p[i],p[j]);
                swap(d[i],d[j]);
            }
        }
    }
}

int Job_sequencing(int d[],int p[],int n){
    Max_sort(d,p,n);
    int job[n+1];
    int profit=0;
    for(int i=0;i<n+1;i++){
        job[i]=-1;
    }
    for(int i=1;i<n+1;i++){
        int j=d[i];
        for(;j>0;j--){
            if(job[j]==-1){
                job[j]=d[i];
                profit=profit+p[i];
                j=0;
            }
        }
    }
    return profit;
}

int main(){
    int n;
    cout<<"Enter no.of jobs:";
    cin>>n;
    int d[n],p[n];
    for(int i=0;i<n+1;i++){
        if(i==0){
            d[i]=-1;
            p[i]=-1;
        }else{
            cout<<"Enter Deadline "<<i<<" :";
            cin>>d[i];
            cout<<"Enter profit "<<i<<" :";
            cin>>p[i];
        }
    }
    int profit=Job_sequencing(d,p,n);
    cout<<"Profit:"<<profit;
    return 0;
}

 //================================================ //

//??CONVEX HULL??

#include<iostream>
#include<vector>
using namespace std;

struct Point{
    int x,y;
};

int dist(Point p,Point q,Point r){
    int v;
    v=(q.y-p.y)*(r.x-q.x)-(r.y-q.y)*(q.x-p.x);
    if(v==0){
        return 0;
    }
    if(v>0){
        return 1;
    }else{
        return 2;
    }
}

int Convex_hull(Point points[],int n){
    if(n<3){
        return 0;
    }
    vector<Point> hull;
    int l=0;
    for(int i=1;i<n;i++){
        if(points[i].x<points[l].x){
            l=i;
        }
    }
    int p=l,q;
    do{
        hull.push_back(points[p]);
        q=p+1;
        for(int i=0;i<n;i++){
            if(dist(points[p],points[i],points[q])==2){
                q=i;
            }
        }
        p=q;
    }while(p!=l);
    for(int i=0;i<hull.size();i++){
        cout<<"("<<hull[i].x<<","<<hull[i].y<<")"<<endl;
    }
    return 0;
}

int main(){
    Point p[]={{2,0},{0,1},{4,4},{0,4},{1,2},{2,1}}; 
    int n=sizeof(p)/sizeof(p[0]);
    Convex_hull(p,n);
    return 0;
}

//================================================== //

//??DIJKESTRA??

#include<bits/stdc++.h>
using namespace std;

int findmindist(int dist[],bool visited[]){
    int mindist=INT_MAX;
    int minidx;
    for(int i=0;i<6;i++){
        if(!visited[i] && dist[i]<mindist){
            mindist=dist[i];
            minidx=i;
        }
    }
    return minidx;
}

void Dijkestra(int g[6][6],int s){
    int dist[6];
    bool visited[6];
    for(int i=0;i<6;i++){
        dist[i]=INT_MAX;
        visited[i]=false;
    }
    dist[s]=0;
    for(int i=0;i<6-1;i++){
        int u=findmindist(dist,visited);
        visited[u]=true;
        for(int v=0;v<6;v++){
            if(!visited[i] && g[u][v] && dist[u]+g[u][v]<dist[v]){
                dist[v]=dist[u]+g[u][v];
            }
        }

    }
    cout<<"Node:"<<"        "<<"Dist:"<<endl;
    for(int i=1;i<6;i++)
    cout<<i<<"            "<<dist[i]<<endl;
}

int main(){
    int graph[6][6]={
        {0,1,0,0,6,7},
        {0,0,1,0,4,0},
        {0,0,0,1,2,0},
        {0,0,0,0,0,0},
        {0,0,0,2,0,3},
        {0,0,0,2,0,0}
    };
    Dijkestra(graph,0);
    return 0;
}

//=========================================================== //

//??PRIMS??

#include<bits/stdc++.h>
using namespace std;

# define V 4

int findminmst(int key[],bool mstset[]){
    int minkey=INT_MAX,minindex;
    for(int i=0;i<V;i++){
        if(!mstset[i] && key[i]<minkey){
            minkey=key[i];
            minindex=i;
        }
    }
    return minindex;
}

void Prims(int graph[V][V]){
    int parent[V];
    int key[V];
    bool mstset[V];
    for(int i=0;i<V;i++){
        key[i]=INT_MAX;
        mstset[i]=false;
    }
    key[0]=0;
    parent[0]=-1;
    for(int i=0;i<V-1;i++){
        int u=findminmst(key,mstset);
        mstset[u]=true;
        for(int v=0;v<V;v++){
            if(graph[u][v] && !mstset[v] && graph[u][v]<key[v]){
                key[v]=graph[u][v];
                parent[v]=u;
            }
        }
        
    }
    for(int i=1;i<V;i++){
        cout << parent[i] << " - " << i << " \t" << graph[parent[i]][i] << " \n";
    }
}

int main(){
    int graph[V][V]={ 
        { 0, 2, 3, 0},
        { 2, 0, 1, 4},
        { 3, 1, 0, 0},
        { 0, 4, 0, 0},
    };
    Prims(graph);

    return 0;
}

//======================================================== //

//??KMP??

#include<iostream>
#include<string>
using namespace std;

void buildlps(string pattern,int* lps){
    int j=0;
    int patternlength=pattern.length();
    lps[0]=0;
    int i=1;
    while(i<patternlength){
        if(pattern[i]==pattern[j]){
            lps[i]=j+1;
            i++;
            j++;
        }else{
            if(j!=0){
                j=lps[j-1];
            }else{
                lps[i]=0;
                i++;
            }
        }
        
    }
}

void Searchpattern(string text,string pattern){
    int patternlength=pattern.length();
    int textlength=text.length();
    int *lps=new int[patternlength];
    buildlps(pattern,lps);
    int i=0,j=0;
    while(i<textlength){
        if(text[i]==pattern[j]){
            i++;
            j++;
        }
        if(patternlength==j){
            cout<<"Pattern found at index:"<<i-j<<endl;
            j=lps[j-1];
        }else if(text[i]!=pattern[j] && i<textlength){
            if(j!=0){
                j=lps[j-1];
            }else{
                i++;
            }
        }

    }
    delete[] lps;
}

int main(){
    string text;
    cout<<"Enter text:";
    cin>>text;
    string pattern;
    cout<<"Enter pattern:";
    cin>>pattern;
    Searchpattern(text,pattern);
    return 0;
}

//============================================================== //

//??RABINKARP??

#include <bits/stdc++.h>
using namespace std;

void rabinKarpSearch(string text, string pattern) {
    int textLength = text.length();
    int patternLength = pattern.length();
    int prime = 31;
    int mod = 1e6 + 9;

    long long p_pow = 1;
    for (int i = 0; i < patternLength - 1; i++) {
        p_pow = (p_pow * prime) % mod;
    }

    long long patternHash = 0;
    for (int i = 0; i < patternLength; i++) {
        patternHash = (patternHash * prime + (pattern[i] - '0' + 1)) % mod;
    }

    long long currentHash = 0;
    for (int i = 0; i < textLength; i++) {
        currentHash = (currentHash * prime + (text[i] - '0' + 1)) % mod;
        if (i >= patternLength - 1) {
            if (currentHash == patternHash) {
                cout << "The given pattern occurs index " << i - (patternLength - 1) << endl;
            }
            currentHash = (currentHash - (text[i - (patternLength - 1)] - '0' + 1) * p_pow + mod) % mod;
        }
    }
}

int main() {
    string text = "31415926535";
    string pattern = "26";

    rabinKarpSearch(text, pattern);

    return 0;
}


//============================================================== //